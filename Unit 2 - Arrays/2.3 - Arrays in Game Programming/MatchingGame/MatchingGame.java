/*
 * 
 * This is a simple matching game which allows the user to guess which two cards are the same.
 * To run the game, select any two cards. If correct, the cards will turn to Mario, if incorrect they will flip back.
 * Reset allows you to restart the game and randomize the cards.
 *
 * date         20201008
 * @filename	MatchingGame.java
 * @author      jdalwadi
 * @version     1.1
 * @see         assignment 2.3
 * REFERENCE:
 * https://www.programcreek.com/java-api-examples/?api=javax.swing.Timer used to learn timers
 */



import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.Timer;
import javax.swing.ImageIcon;

public class MatchingGame extends javax.swing.JFrame {
    // use the following line for windows:
    // String path = ".\";
    // use following line for mac:
    String path = "./";
    // declares and initializes variables
    ArrayList<String> cards = new ArrayList<>();
    ArrayList<String> set = new ArrayList<>();
    // powerup images taken from: https://www.google.com/url?sa=i&url=https%3A%2F%2Faminoapps.com%2Fc%2Fvideo-games%2Fpage%2Fblog%2Ftop-ten-mario-power-ups%2FG4Sn_uJYNa538Ra2q5q7QaZ1oeePaP&psig=AOvVaw1dgZy-g0ycAM5OOz80ec05&ust=1602692687962000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCKDkqNX9sewCFQAAAAAdAAAAABAD
    // coin block image taken from: https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.pinterest.com%2Fpin%2F392939136210630665%2F&psig=AOvVaw3cQUTpiOEcYT2I3NSCqrEJ&ust=1602692961955000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCLjJydf-sewCFQAAAAAdAAAAABAD
    // done image taken from: https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.notebookcheck.net%2FSuper-Mario-64-gets-ported-to-PC-with-DirectX-12-and-ray-tracing-support-doesn-t-need-an-RTX-2080-Ti-but-it-still-looks-like-an-N64-game.463828.0.html&psig=AOvVaw3Aws1Rh57V3Y2bsbnVqg5W&ust=1602693067945000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCIiw-ZH_sewCFQAAAAAdAAAAABAJ
    ImageIcon a = new ImageIcon(path + "fire.png");
    ImageIcon b = new ImageIcon(path + "jumbo.png");
    ImageIcon c = new ImageIcon(path + "extralife.png");
    ImageIcon d = new ImageIcon(path + "big.png");
    ImageIcon e = new ImageIcon(path + "fly.png");
    ImageIcon f = new ImageIcon(path + "freeze.png");
    ImageIcon g = new ImageIcon(path + "penguin.png");
    ImageIcon h = new ImageIcon(path + "star.png");
    ImageIcon i = new ImageIcon(path + "tiny.png");
    ImageIcon j = new ImageIcon(path + "coin.png");
    ImageIcon back = new ImageIcon(path + "cardback.png");
    ImageIcon done = new ImageIcon(path + "done.png");
    int count, c1, c2;
    int cardsLeft = 20;
    int[] change = new int[20];
    

    /**
     * Creates new form MatchingGame
     */
    public MatchingGame() {
        initComponents();
        btnReset.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTitle = new javax.swing.JLabel();
        Card1 = new javax.swing.JButton();
        Card2 = new javax.swing.JButton();
        Card3 = new javax.swing.JButton();
        Card4 = new javax.swing.JButton();
        Card5 = new javax.swing.JButton();
        Card6 = new javax.swing.JButton();
        Card7 = new javax.swing.JButton();
        Card8 = new javax.swing.JButton();
        Card9 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        Card13 = new javax.swing.JButton();
        Card14 = new javax.swing.JButton();
        Card15 = new javax.swing.JButton();
        Card16 = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtInstruction = new javax.swing.JTextField();
        Card18 = new javax.swing.JButton();
        Card17 = new javax.swing.JButton();
        Card20 = new javax.swing.JButton();
        Card19 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matching Game");

        mainTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mainTitle.setForeground(new java.awt.Color(255, 0, 0));
        mainTitle.setText("MARIO MATCHING GAME");

        Card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card1ActionPerformed(evt);
            }
        });

        Card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card2ActionPerformed(evt);
            }
        });

        Card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card3ActionPerformed(evt);
            }
        });

        Card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card4ActionPerformed(evt);
            }
        });

        Card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card5ActionPerformed(evt);
            }
        });

        Card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card6ActionPerformed(evt);
            }
        });

        Card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card7ActionPerformed(evt);
            }
        });

        Card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card8ActionPerformed(evt);
            }
        });

        Card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card9ActionPerformed(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card10ActionPerformed(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card11ActionPerformed(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        Card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card13ActionPerformed(evt);
            }
        });

        Card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card14ActionPerformed(evt);
            }
        });

        Card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card15ActionPerformed(evt);
            }
        });

        Card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card16ActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtInstruction.setEditable(false);
        txtInstruction.setText("Click the Reset button to restart the game and randomize the cards again.");

        Card18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card18ActionPerformed(evt);
            }
        });

        Card17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card17ActionPerformed(evt);
            }
        });

        Card20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card20ActionPerformed(evt);
            }
        });

        Card19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.png"))); // NOI18N
        Card19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                    .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(63, 63, 63)
                                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Card19, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Card20, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(62, 62, 62)
                                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Card5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(mainTitle)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Card2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Card3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Card4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Card8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Card15, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitle)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Card8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Card12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card9, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(Card10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Card16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card13, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(Card14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card18, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card20, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card19, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(btnExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Exit the application.
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    public void check() {
        // adds event for timer
        ActionListener checkmatch = new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e){
                // given check statements
                count = 0;
                if (c1 == c2) {
                    for (int y = 1; y <= 2; y++) {
                    if (change[0] == 0) {
                        Card1.setDisabledIcon(done);
                        Card1.setEnabled(false);
                        
                        change[0] = 2;
                        
                    } else if (change[1] == 0) {
                        Card2.setDisabledIcon(done);
                        Card2.setEnabled(false);
                        
                        change[1] = 2;
                        
                    } else if (change[2] == 0) {
                        Card3.setDisabledIcon(done);
                        Card3.setEnabled(false);
                        
                        change[2] = 2;
                        
                    } else if (change[3] == 0) {
                        Card4.setDisabledIcon(done);
                        Card4.setEnabled(false);
                        
                        change[3] = 2;
                        
                    } else if (change[4] == 0) {
                        Card5.setDisabledIcon(done);
                        Card5.setEnabled(false);
                        
                        change[4] = 2;
                        
                    } else if (change[5] == 0) {
                        Card6.setDisabledIcon(done);
                        Card6.setEnabled(false);
                        
                        change[5] = 2;
                        
                    } else if (change[6] == 0) {
                        Card7.setDisabledIcon(done);
                        Card7.setEnabled(false);
                        
                        change[6] = 2;
                        
                    } else if (change[7] == 0) {
                        Card8.setDisabledIcon(done);
                        Card8.setEnabled(false);
                        
                        change[7] = 2;
                        
                    } else if (change[8] == 0) {
                        Card9.setDisabledIcon(done);
                        Card9.setEnabled(false);
                        
                        change[8] = 2;
                        
                    } else if (change[9] == 0) {
                        Card10.setDisabledIcon(done);
                        Card10.setEnabled(false);
                        
                        change[9] = 2;
                        
                    } else if (change[10] == 0) {
                        Card11.setDisabledIcon(done);
                        Card11.setEnabled(false);
                        
                        change[10] = 2;
                        
                    } else if (change[11] == 0) {
                        Card12.setDisabledIcon(done);
                        Card12.setEnabled(false);
                        
                        change[11] = 2;
                        
                    } else if (change[12] == 0) {
                        Card13.setDisabledIcon(done);
                        Card13.setEnabled(false);
                        
                        change[12] = 2;
                        
                    } else if (change[13] == 0) {
                        Card14.setDisabledIcon(done);
                        Card14.setEnabled(false);
                        change[13] = 2;
                        
                        
                    } else if (change[14] == 0) {
                        Card15.setDisabledIcon(done);
                        Card15.setEnabled(false);
                        change[14] = 2;
                        
                        
                    } else if (change[15] == 0) {
                        Card16.setDisabledIcon(done);
                        Card16.setEnabled(false);
                        
                        change[15] = 2;
                        
                    } else if (change[16] == 0) {
                        Card17.setDisabledIcon(done);
                        Card17.setEnabled(false);
                        change[16] = 2;
                        
                        
                    } else if (change[17] == 0) {
                        Card18.setDisabledIcon(done);
                        Card18.setEnabled(false);
                        change[17] = 2;
                        
                        
                    } else if (change[18] == 0) {
                        Card19.setDisabledIcon(done);
                        Card19.setEnabled(false);
                        change[18] = 2;
                        
                        
                    } else if (change[19] == 0) {
                        Card20.setDisabledIcon(done);
                        Card20.setEnabled(false);
                        change[19] = 2;
                        ;
                        
                    }
                }
                txtInstruction.setText("Congratulations! You found a pair!");
            }
            else {
                for (int z = 1; z <= 2; z++) {
                    if (change[0] == 0) {
                        Card1.setEnabled(true);
                        Card1.setIcon(back);
                        change[0] = 1;
                        
                    } else if (change[1] == 0) {
                        Card2.setEnabled(true);
                        Card2.setIcon(back); 
                        change[1] = 1;
                       
                    } else if (change[2] == 0) {
                        Card3.setEnabled(true);
                        Card3.setIcon(back);
                        change[2] = 1;
                        
                    } else if (change[3] == 0) {
                        Card4.setEnabled(true);
                        Card4.setIcon(back);
                        change[3] = 1;
                        
                    } else if (change[4] == 0) {
                        
                        change[4] = 1;
                        Card5.setEnabled(true);
                        Card5.setIcon(back);
                    } else if (change[5] == 0) {
                        
                        change[5] = 1;
                        Card6.setEnabled(true);
                        Card6.setIcon(back);
                    } else if (change[6] == 0) {
                       
                        change[6] = 1;
                        Card7.setEnabled(true);
                        Card7.setIcon(back);
                    } else if (change[7] == 0) {
                        
                        change[7] = 1;
                        Card8.setEnabled(true);
                        Card8.setIcon(back);
                    } else if (change[8] == 0) {
                        
                        change[8] = 1;
                        Card9.setEnabled(true);
                        Card9.setIcon(back);
                    } else if (change[9] == 0) {
                        
                        change[9] = 1;
                        Card10.setEnabled(true);
                        Card10.setIcon(back);
                    } else if (change[10] == 0) {
                        
                        change[10] = 1;
                        Card11.setEnabled(true);
                        Card11.setIcon(back);
                    } else if (change[11] == 0) {
                        
                        change[11] = 1;
                        Card12.setEnabled(true);
                        Card12.setIcon(back);
                    } else if (change[12] == 0) {
                        
                        change[12] = 1;
                        Card13.setEnabled(true);
                        Card13.setIcon(back);
                    } else if (change[13] == 0) {
                        
                        change[13] = 1;
                        Card14.setEnabled(true);
                        Card14.setIcon(back);
                    } else if (change[14] == 0) {
                        
                        change[14] = 1;
                        Card15.setEnabled(true);
                        Card15.setIcon(back);
                    } else if (change[15] == 0) {
                        
                        change[15] = 1;
                        Card16.setEnabled(true);
                        Card16.setIcon(back);
                    } else if (change[16] == 0) {
                        
                        change[16] = 1;
                        Card17.setEnabled(true);
                        Card17.setIcon(back);
                    } else if (change[17] == 0) {
                        
                        change[17] = 1;
                        Card18.setEnabled(true);
                        Card18.setIcon(back);
                    } else if (change[18] == 0) {
                        Card19.setEnabled(true);
                        Card19.setIcon(back);
                        change[18] = 1;
                        
                    } else if (change[19] == 0) {
                        Card20.setEnabled(true);
                        Card20.setIcon(back);
                        change[19] = 1;
                        
                    }
                txtInstruction.setText("Almost! Please try again!");                                              
                }
		}
                // boolean and for loop to iterate through change array and see if all buttons are disabled
                boolean isDone = true;
                for (int i = 0; i < change.length;i++){
                    if (change[i] != 2){
                        isDone = false;
                        break;
                    }
                }

                // if game is over, set instructions to congratulations, reset to play again, and exit to close
                if (isDone == true){
                    txtInstruction.setText("Congratulations! You finished the game! Press Reset to play again, or exit to close.");
                }

	};
        };
        // starts timer to animate the game better
	Timer timer = new Timer(250, checkmatch);
	timer.start();
        timer.setRepeats(false);
    };
    
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        count = 0;
        c1 = 0;
        c2 = 0;
        cardsLeft = 20;
        change = new int[20];
        // sets all icons to flipped down and enabled 
        txtInstruction.setText("Click the Reset button to restart the game and randomize the cards again.");
        Card1.setEnabled(true);
        Card2.setEnabled(true);
        Card3.setEnabled(true);
        Card4.setEnabled(true);
        Card5.setEnabled(true);
        Card6.setEnabled(true);
        Card7.setEnabled(true);
        Card8.setEnabled(true);
        Card9.setEnabled(true);
        Card10.setEnabled(true);
        Card11.setEnabled(true);
        Card12.setEnabled(true);
        Card13.setEnabled(true);
        Card14.setEnabled(true);
        Card15.setEnabled(true);
        Card16.setEnabled(true);
        Card17.setEnabled(true);
        Card18.setEnabled(true);
        Card19.setEnabled(true);
        Card20.setEnabled(true);
        
        Card1.setIcon(back);
        Card2.setIcon(back);
        Card3.setIcon(back);
        Card4.setIcon(back);
        Card5.setIcon(back);
        Card6.setIcon(back);
        Card7.setIcon(back);
        Card8.setIcon(back);
        Card9.setIcon(back);
        Card10.setIcon(back);
        Card11.setIcon(back);
        Card12.setIcon(back);
        Card13.setIcon(back);
        Card14.setIcon(back);
        Card15.setIcon(back);
        Card16.setIcon(back);
        Card17.setIcon(back);
        Card18.setIcon(back);
        Card19.setIcon(back);
        Card20.setIcon(back);
        
        //clear arrays
        cards.clear();
        set.clear();
        
        /** Set change array */
        for (int z = 0; z <= 19; z++) {
            change[z] = 1;
        }
        
        /** Assign cards at random */
        String temp;
        for (int x = 0; x <= 9; x++) {
            for (int y = 1; y <= 2; y++) {
                temp = Integer.toString(x);
                set.add(temp);
            }
        }
        
        for (int x=0; x <= 19; x++) {
            double index = Math.floor(Math.random()*(20-x));
            int index1 = (int)index;
            cards.add(set.get(index1));
            set.remove(set.get(index1));   
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void Card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card1ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(0);
        
        if (temp.equals("0")) {
            Card1.setIcon(a);
            Card1.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card1.setIcon(b);
            Card1.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card1.setIcon(c);
            Card1.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card1.setIcon(d);
            Card1.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card1.setIcon(e);
            Card1.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card1.setIcon(f);
            Card1.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card1.setIcon(g);
            Card1.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card1.setIcon(h);
            Card1.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card1.setIcon(i);
            Card1.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card1.setIcon(j);
            Card1.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[0] = 0;
            Card1.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[0] = 0;
            check();
        }
        
    }//GEN-LAST:event_Card1ActionPerformed

    private void Card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card2ActionPerformed
        // TODO add your handling code here:
                
        String temp = cards.get(1);
        
        if (temp.equals("0")) {
            Card2.setIcon(a);
            Card2.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card2.setIcon(b);
            Card2.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card2.setIcon(c);
            Card2.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card2.setIcon(d);
            Card2.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card2.setIcon(e);
            Card2.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card2.setIcon(f);
            Card2.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card2.setIcon(g);
            Card2.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card2.setIcon(h);
            Card2.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card2.setIcon(i);
            Card2.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card2.setIcon(j);
            Card2.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[1] = 0;
            Card2.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[1] = 0;
            check();
        }
         
    }//GEN-LAST:event_Card2ActionPerformed

    private void Card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card3ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(2);
        
        if (temp.equals("0")) {
            Card3.setIcon(a);
            Card3.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card3.setIcon(b);
            Card3.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card3.setIcon(c);
            Card3.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card3.setIcon(d);
            Card3.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card3.setIcon(e);
            Card3.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card3.setIcon(f);
            Card3.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card3.setIcon(g);
            Card3.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card3.setIcon(h);
            Card3.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card3.setIcon(i);
            Card3.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card3.setIcon(j);
            Card3.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[2] = 0;
            Card3.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[2] = 0;
            check();
        }
        
    }//GEN-LAST:event_Card3ActionPerformed

    private void Card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card5ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(4);
        
        if (temp.equals("0")) {
            Card5.setIcon(a);
            Card5.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card5.setIcon(b);
            Card5.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card5.setIcon(c);
            Card5.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card5.setIcon(d);
            Card5.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card5.setIcon(e);
            Card5.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card5.setIcon(f);
            Card5.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card5.setIcon(g);
            Card5.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card5.setIcon(h);
            Card5.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card5.setIcon(i);
            Card5.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card5.setIcon(j);
            Card5.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[4] = 0;
            Card5.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[4] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card5ActionPerformed

    private void Card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card4ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(3);
        
        if (temp.equals("0")) {
            Card4.setIcon(a);
            Card4.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card4.setIcon(b);
            Card4.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card4.setIcon(c);
            Card4.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card4.setIcon(d);
            Card4.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card4.setIcon(e);
            Card4.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card4.setIcon(f);
            Card4.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card4.setIcon(g);
            Card4.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card4.setIcon(h);
            Card4.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card4.setIcon(i);
            Card4.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card4.setIcon(j);
            Card4.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[3] = 0;
            Card4.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[3] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card4ActionPerformed

    private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
        // TODO add your handling code here:
        
        
        String temp = cards.get(5);
        
        if (temp.equals("0")) {
            Card6.setIcon(a);
            Card6.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card6.setIcon(b);
            Card6.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card6.setIcon(c);
            Card6.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card6.setIcon(d);
            Card6.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card6.setIcon(e);
            Card6.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card6.setIcon(f);
            Card6.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card6.setIcon(g);
            Card6.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card6.setIcon(h);
            Card6.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card6.setIcon(i);
            Card6.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card6.setIcon(j);
            Card6.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[5] = 0;
            Card6.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[5] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card6ActionPerformed

    private void Card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card7ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(6);
        
        if (temp.equals("0")) {
            Card7.setIcon(a);
            Card7.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card7.setIcon(b);
            Card7.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card7.setIcon(c);
            Card7.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card7.setIcon(d);
            Card7.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card7.setIcon(e);
            Card7.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card7.setIcon(f);
            Card7.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card7.setIcon(g);
            Card7.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card7.setIcon(h);
            Card7.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card7.setIcon(i);
            Card7.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card7.setIcon(j);
            Card7.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[6] = 0;
            Card7.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[6] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card7ActionPerformed

    private void Card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card8ActionPerformed
        // TODO add your handling code here:
        
        
        String temp = cards.get(7);
        if (temp.equals("0")) {
            Card8.setIcon(a);
            Card8.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card8.setIcon(b);
            Card8.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card8.setIcon(c);
            Card8.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card8.setIcon(d);
            Card8.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card8.setIcon(e);
            Card8.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card8.setIcon(f);
            Card8.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card8.setIcon(g);
            Card8.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card8.setIcon(h);
            Card8.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card8.setIcon(i);
            Card8.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card8.setIcon(j);
            Card8.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[7] = 0;
            Card8.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[7] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card8ActionPerformed

    private void Card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card9ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(8);
        
        if (temp.equals("0")) {
            Card9.setIcon(a);
            Card9.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card9.setIcon(b);
            Card9.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card9.setIcon(c);
            Card9.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card9.setIcon(d);
            Card9.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card9.setIcon(e);
            Card9.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card9.setIcon(f);
            Card9.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card9.setIcon(g);
            Card9.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card9.setIcon(h);
            Card9.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card9.setIcon(i);
            Card9.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card9.setIcon(j);
            Card9.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[8] = 0;
            Card9.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[8] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card9ActionPerformed

    private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(9);
        
        if (temp.equals("0")) {
            Card10.setIcon(a);
            Card10.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card10.setIcon(b);
            Card10.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card10.setIcon(c);
            Card10.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card10.setIcon(d);
            Card10.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card10.setIcon(e);
            Card10.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card10.setIcon(f);
            Card10.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card10.setIcon(g);
            Card10.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card10.setIcon(h);
            Card10.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card10.setIcon(i);
            Card10.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card10.setIcon(j);
            Card10.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[9] = 0;
            Card10.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[9] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card10ActionPerformed

    private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(10);
        
        if (temp.equals("0")) {
            Card11.setIcon(a);
            Card11.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card11.setIcon(b);
            Card11.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card11.setIcon(c);
            Card11.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card11.setIcon(d);
            Card11.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card11.setIcon(e);
            Card11.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card11.setIcon(f);
            Card11.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card11.setIcon(g);
            Card11.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card11.setIcon(h);
            Card11.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card11.setIcon(i);
            Card11.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card11.setIcon(j);
            Card11.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[10] = 0;
            Card11.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[10] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card11ActionPerformed

    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(11);
        
        if (temp.equals("0")) {
            Card12.setIcon(a);
            Card12.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card12.setIcon(b);
            Card12.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card12.setIcon(c);
            Card12.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card12.setIcon(d);
            Card12.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card12.setIcon(e);
            Card12.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card12.setIcon(f);
            Card12.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card12.setIcon(g);
            Card12.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card12.setIcon(h);
            Card12.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card12.setIcon(i);
            Card12.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card12.setIcon(j);
            Card12.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[11] = 0;
            Card12.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[11] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card12ActionPerformed

    private void Card13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card13ActionPerformed
        // TODO add your handling code here:
        String temp = cards.get(12);
        
        if (temp.equals("0")) {
            Card13.setIcon(a);
            Card13.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card13.setIcon(b);
            Card13.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card13.setIcon(c);
            Card13.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card13.setIcon(d);
            Card13.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card13.setIcon(e);
            Card13.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card13.setIcon(f);
            Card13.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card13.setIcon(g);
            Card13.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card13.setIcon(h);
            Card13.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card13.setIcon(i);
            Card13.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card13.setIcon(j);
            Card13.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[12] = 0;
            Card13.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[12] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card13ActionPerformed

    private void Card14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card14ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(13);
        
        if (temp.equals("0")) {
            Card14.setIcon(a);
            Card14.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card14.setIcon(b);
            Card14.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card14.setIcon(c);
            Card14.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card14.setIcon(d);
            Card14.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card14.setIcon(e);
            Card14.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card14.setIcon(f);
            Card14.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card14.setIcon(g);
            Card14.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card14.setIcon(h);
            Card14.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card14.setIcon(i);
            Card14.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card14.setIcon(j);
            Card14.setDisabledIcon(j);
        }
         
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[13] = 0;
            Card14.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[13] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card14ActionPerformed

    private void Card15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card15ActionPerformed
        // TODO add your handling code here:
        
        String temp = cards.get(14);
        
        if (temp.equals("0")) {
            Card15.setIcon(a);
            Card15.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card15.setIcon(b);
            Card15.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card15.setIcon(c);
            Card15.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card15.setIcon(d);
            Card15.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card15.setIcon(e);
            Card15.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card15.setIcon(f);
            Card15.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card15.setIcon(g);
            Card15.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card15.setIcon(h);
            Card15.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card15.setIcon(i);
            Card15.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card15.setIcon(j);
            Card15.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[14] = 0;
            Card15.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[14] = 0;
            check();
            
        }
 
    }//GEN-LAST:event_Card15ActionPerformed

    private void Card16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card16ActionPerformed
        // TODO add your handling code here:
        String temp = cards.get(15);
        
        if (temp.equals("0")) {
            Card16.setIcon(a);
            Card16.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card16.setIcon(b);
            Card16.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card16.setIcon(c);
            Card16.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card16.setIcon(d);
            Card16.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card16.setIcon(e);
            Card16.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card16.setIcon(f);
            Card16.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card16.setIcon(g);
            Card16.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card16.setIcon(h);
            Card16.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card16.setIcon(i);
            Card16.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card16.setIcon(j);
            Card16.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[15] = 0;
            Card16.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[15] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card16ActionPerformed

    private void Card18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card18ActionPerformed
        String temp = cards.get(17);
        
        if (temp.equals("0")) {
            Card18.setIcon(a);
            Card18.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card18.setIcon(b);
            Card18.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card18.setIcon(c);
            Card18.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card18.setIcon(d);
            Card18.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card18.setIcon(e);
            Card18.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card18.setIcon(f);
            Card18.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card18.setIcon(g);
            Card18.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card18.setIcon(h);
            Card18.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card18.setIcon(i);
            Card18.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card18.setIcon(j);
            Card18.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[17] = 0;
            Card18.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[17] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card18ActionPerformed

    private void Card17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card17ActionPerformed
        // TODO add your handling code here:
        String temp = cards.get(16);
        
        if (temp.equals("0")) {
            Card17.setIcon(a);
            Card17.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card17.setIcon(b);
            Card17.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card17.setIcon(c);
            Card17.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card17.setIcon(d);
            Card17.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card17.setIcon(e);
            Card17.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card17.setIcon(f);
            Card17.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card17.setIcon(g);
            Card17.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card17.setIcon(h);
            Card17.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card17.setIcon(i);
            Card17.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card17.setIcon(j);
            Card17.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[16] = 0;
            Card17.setEnabled(false); 
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[16] = 0;
            check();
            
        }
        
    }//GEN-LAST:event_Card17ActionPerformed

    private void Card20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card20ActionPerformed
        // TODO add your handling code here:
        String temp = cards.get(19);
        
        if (temp.equals("0")) {
            Card20.setIcon(a);
            Card20.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card20.setIcon(b);
            Card20.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card20.setIcon(c);
            Card20.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card20.setIcon(d);
            Card20.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card20.setIcon(e);
            Card20.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card20.setIcon(f);
            Card20.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card20.setIcon(g);
            Card20.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card20.setIcon(h);
            Card20.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card20.setIcon(i);
            Card20.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card20.setIcon(j);
            Card20.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[19] = 0;
            Card20.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[19] = 0;
            check();
            
        }
         
    }//GEN-LAST:event_Card20ActionPerformed

    private void Card19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card19ActionPerformed
        // TODO add your handling code here:
        String temp = cards.get(18);
        
        if (temp.equals("0")) {
            Card19.setIcon(a);
            Card19.setDisabledIcon(a);
        } else if (temp.equals("1")) {
            Card19.setIcon(b);
            Card19.setDisabledIcon(b);
        } else if (temp.equals("2")) {
            Card19.setIcon(c);
            Card19.setDisabledIcon(c);
        } else if (temp.equals("3")) {
            Card19.setIcon(d);
            Card19.setDisabledIcon(d);
        } else if (temp.equals("4")) {
            Card19.setIcon(e);
            Card19.setDisabledIcon(e);
        } else if (temp.equals("5")) {
            Card19.setIcon(f);
            Card19.setDisabledIcon(f);
        } else if (temp.equals("6")) {
            Card19.setIcon(g);
            Card19.setDisabledIcon(g);
        } else if (temp.equals("7")) {
            Card19.setIcon(h);
            Card19.setDisabledIcon(h);
        } else if (temp.equals("8")) {
            Card19.setIcon(i);
            Card19.setDisabledIcon(i);
        } else if (temp.equals("9")) {
            Card19.setIcon(j);
            Card19.setDisabledIcon(j);
        }
        
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[18] = 0;
            Card19.setEnabled(false);
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[18] = 0;
            check();
        }
         
    }//GEN-LAST:event_Card19ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card13;
    private javax.swing.JButton Card14;
    private javax.swing.JButton Card15;
    private javax.swing.JButton Card16;
    private javax.swing.JButton Card17;
    private javax.swing.JButton Card18;
    private javax.swing.JButton Card19;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card20;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JTextField txtInstruction;
    // End of variables declaration//GEN-END:variables

}
